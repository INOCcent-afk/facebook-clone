generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  uid           String         @unique
  firstName     String
  lastName      String
  username      String         @unique
  email         String         @unique
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  reactions     Reaction[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  friends User[] @relation("UserFriends")

  // This second "side" of the UserFriends relation exists solely 
  // to satisfy prisma's requirements; we won't access it directly.
  symmetricFriends User[] @relation("UserFriends")

  friendRequestsSender   FriendRequest[] @relation("UserFriendRequestsSender")
  friendRequestsReceiver FriendRequest[] @relation("UserFriendRequestsReceiver")
  friendRequest          FriendRequest[]

  chatRooms    ChatRoom[]
  Message      Message[]
  UserChatRoom UserChatRoom[]
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("UserFriendRequestsSender", fields: [senderUid], references: [uid])
  senderUid   String   @unique
  receiver    User     @relation("UserFriendRequestsReceiver", fields: [receiverUid], references: [uid])
  receiverUid String   @unique
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?

  @@index([senderUid, receiverUid])
}

model Profile {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  coverPhoto     String?
  profilePicture String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id                  Int      @id @default(autoincrement())
  user                User     @relation(fields: [userId], references: [id])
  userId              Int
  notificationMessage String
  notificationUrl     String
  createdFor          String // Uid of user
  viewed              Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([createdFor])
}

model Post {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  postParentId Int?
  comments     Comment[]
  image        String?
  video        String?
  images       Post[]    @relation("Images")
  videos       Post[]    @relation("Videos")
  postContent  String?

  // This second "side" of the Images relation exists solely 
  // to satisfy prisma's requirements; we won't access it directly.
  symmetricTweets Post[]     @relation("Images")
  symmetricVideos Post[]     @relation("Videos")
  reactions       Reaction[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Comment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  post            Post     @relation(fields: [postId], references: [id])
  postId          Int
  commentParentId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Reaction {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  post   Post  @relation(fields: [postId], references: [id])
  postId Int
  emoji  Emoji
}

enum Emoji {
  LIKE
  HEART
  LAUGH
  SUPRISE
  CRY
  ANGRY
}

model ChatRoom {
  id       Int       @id @default(autoincrement())
  name     String?
  users    User[]
  messages Message[]
  viewed   Boolean   @default(false)

  UserChatRoom UserChatRoom[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  userUid    String
  user       User     @relation(fields: [userUid], references: [uid])
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  createdAt  DateTime @default(now())
}

model UserChatRoom {
  userUid    String
  chatRoomId Int
  user       User     @relation(fields: [userUid], references: [uid])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@id([userUid, chatRoomId])
}
