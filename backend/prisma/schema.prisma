generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  uid               String            @unique
  firstName         String
  lastName          String
  username          String            @unique
  email             String            @unique
  friendsCount      Int               @default(0)
  profile           Profile?
  posts             Post[]
  comments          Comment[]
  notifications     Notification[]
  reactions         Reaction[]
  chatPrivateRooms  ChatRoomPrivate[]
  chatRoomGroups    ChatRoomGroup[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  followedBy        User[]            @relation("UserFollows")
  following         User[]            @relation("UserFollows")
  followedByRequest User[]            @relation("UserFollowedRequest")
  followingRequest  User[]            @relation("UserFollowedRequest")
}

model Profile {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  coverPhoto     String?
  profilePicture String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id                  Int      @id @default(autoincrement())
  createdBy           User     @relation(fields: [userId], references: [id])
  userId              Int
  notificationMessage String
  createdFor          Int // Id of user
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Post {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  postParentId Int?
  comments     Comment[]
  image        String?
  video        String?
  images       Post[]    @relation("Images")
  videos       Post[]    @relation("Videos")
  postContent  String?

  // This second "side" of the Images relation exists solely 
  // to satisfy prisma's requirements; we won't access it directly.
  symmetricTweets Post[]     @relation("Images")
  symmetricVideos Post[]     @relation("Videos")
  reactions       Reaction[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Comment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  post            Post     @relation(fields: [postId], references: [id])
  postId          Int
  commentParentId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Reaction {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  post   Post  @relation(fields: [postId], references: [id])
  postId Int
  emoji  Emoji
}

enum Emoji {
  LIKE
  HEART
  LAUGH
  SUPRISE
  CRY
  ANGRY
}

model ChatRoomPrivate {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
  chatRoomName String
}

model ChatRoomGroup {
  id      Int      @id @default(autoincrement())
  User    User     @relation(fields: [userId], references: [id])
  userId  Int
  members String[]
}
