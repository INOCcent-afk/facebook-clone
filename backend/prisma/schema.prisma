generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  uid           String         @unique
  firstName     String
  lastName      String
  username      String         @unique
  email         String         @unique
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  reactions     Reaction[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  friends User[] @relation("UserFriends")

  chatRooms      ChatRoom[]      @relation("userToChatRooms")
  chatRoomGroups ChatRoomGroup[] @relation("userToChatRoomGroups")

  createdGroups ChatRoomGroup[] @relation("createdByGroup")
  createdRooms  ChatRoom[]      @relation("createdByRoom")

  // This second "side" of the UserFriends relation exists solely 
  // to satisfy prisma's requirements; we won't access it directly.
  symmetricFriends User[] @relation("UserFriends")

  friendRequestsSender   FriendRequest[] @relation("UserFriendRequestsSender")
  friendRequestsReceiver FriendRequest[] @relation("UserFriendRequestsReceiver")
  friendRequest          FriendRequest[]

  ChatRoomGroup ChatRoomGroup[]
  ChatRoom      ChatRoom[]
  GroupMember   GroupMember[]
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("UserFriendRequestsSender", fields: [senderUid], references: [uid])
  senderUid   String   @unique
  receiver    User     @relation("UserFriendRequestsReceiver", fields: [receiverUid], references: [uid])
  receiverUid String   @unique
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?

  @@index([senderUid, receiverUid])
}

model Profile {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  coverPhoto     String?
  profilePicture String?
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id                  Int      @id @default(autoincrement())
  createdBy           User     @relation(fields: [userId], references: [id])
  userId              Int
  notificationMessage String
  createdFor          Int // Id of user
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Post {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  postParentId Int?
  comments     Comment[]
  image        String?
  video        String?
  images       Post[]    @relation("Images")
  videos       Post[]    @relation("Videos")
  postContent  String?

  // This second "side" of the Images relation exists solely 
  // to satisfy prisma's requirements; we won't access it directly.
  symmetricTweets Post[]     @relation("Images")
  symmetricVideos Post[]     @relation("Videos")
  reactions       Reaction[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Comment {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  post            Post     @relation(fields: [postId], references: [id])
  postId          Int
  commentParentId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Reaction {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  post   Post  @relation(fields: [postId], references: [id])
  postId Int
  emoji  Emoji
}

enum Emoji {
  LIKE
  HEART
  LAUGH
  SUPRISE
  CRY
  ANGRY
}

model ChatRoomGroup {
  id        Int           @id @default(autoincrement())
  members   GroupMember[]
  userId    Int?
  createdBy User?         @relation("createdByGroup", fields: [userId], references: [id], map: "createdByRoom_FK")
  user      User?         @relation(fields: [userId], references: [id])

  userChatRoomGroups User[] @relation("userToChatRoomGroups")
}

model ChatRoom {
  id           Int           @id @default(autoincrement())
  userId       Int
  type         String // 'single' or 'group'
  chatRoomName String?
  members      GroupMember[]
  createdBy    User          @relation("createdByRoom", fields: [userId], references: [id], map: "createdByRoom_FK")
  user         User          @relation(fields: [userId], references: [id])

  userChatRooms User[] @relation("userToChatRooms")
}

model GroupMember {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  chatRoom        ChatRoom       @relation(fields: [chatRoomId], references: [id])
  chatRoomId      Int
  chatRoomGroup   ChatRoomGroup? @relation(fields: [chatRoomGroupId], references: [id])
  chatRoomGroupId Int?
}
